import cv2
import numpy as np
import os
from glob import glob

def apply_clahe(image):
    # Convert image to grayscale if needed
    if len(image.shape) == 3:
        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply CLAHE
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    return clahe.apply(image)

# Example to apply CLAHE to an image
image_path = 'path_to_your_mri_image.jpg'
image = cv2.imread(image_path)
clahe_image = apply_clahe(image)

# Save or visualize the result
cv2.imwrite('clahe_image.jpg', clahe_image)
from tensorflow.keras.preprocessing.image import ImageDataGenerator

def normalize_image(image):
    return image / 255.0

# Example augmentation setup using Keras
datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Apply to images in batches
# datagen.flow will be used during model training
from keras.models import Model
from keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D, concatenate

def unet_plus_plus(input_size=(256, 256, 1)):
    inputs = Input(input_size)

    conv1 = Conv2D(64, 3, activation='relu', padding='same')(inputs)
    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)

    conv2 = Conv2D(128, 3, activation='relu', padding='same')(pool1)
    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)

    # Continue with more U-Net structure layers here...
    # Adding more layers for a deeper model (Nested U-Net)

    up1 = UpSampling2D(size=(2, 2))(conv2)
    merge1 = concatenate([conv1, up1], axis=3)
    conv3 = Conv2D(64, 3, activation='relu', padding='same')(merge1)

    model = Model(inputs, conv3)
    return model

model_unet_plus = unet_plus_plus()
model_unet_plus.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
def attention_unet(input_size=(256, 256, 1)):
    inputs = Input(input_size)

    conv1 = Conv2D(64, 3, activation='relu', padding='same')(inputs)
    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)

    conv2 = Conv2D(128, 3, activation='relu', padding='same')(pool1)
    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)

    # Attention mechanism layers would be applied here...
    
    up1 = UpSampling2D(size=(2, 2))(conv2)
    merge1 = concatenate([conv1, up1], axis=3)
    conv3 = Conv2D(64, 3, activation='relu', padding='same')(merge1)

    model = Model(inputs, conv3)
    return model

model_attention_unet = attention_unet()
model_attention_unet.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
from sklearn.metrics import f1_score

# Define custom metric DICE score (which is equivalent to F1-score for binary tasks)
def dice_coefficient(y_true, y_pred):
    intersection = np.sum(np.abs(y_true * y_pred))
    return (2. * intersection) / (np.sum(np.abs(y_true) + np.abs(y_pred)) + 1e-6)

# Example training
history = model_unet_plus.fit(train_data, train_labels, validation_data=(val_data, val_labels), epochs=50, batch_size=32)
#Web Application Development
pip install fastapi uvicorn
from fastapi import FastAPI, UploadFile, File
import uvicorn
import numpy as np
from keras.models import load_model
from PIL import Image

app = FastAPI()

# Load the trained model
model = load_model('best_model.h5')

@app.post("/predict/")
async def predict(file: UploadFile = File(...)):
    img = Image.open(file.file).convert('L')
    img = img.resize((256, 256))
    img = np.array(img) / 255.0
    img = np.expand_dims(img, axis=0)
    
    pred = model.predict(img)
    return {"prediction": pred.tolist()}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
pip install streamlit
import streamlit as st
import requests
from PIL import Image

st.title('Brain MRI Metastasis Segmentation')

uploaded_file = st.file_uploader("Upload a Brain MRI image", type="jpg")

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption='Uploaded MRI.', use_column_width=True)

    # Send image to FastAPI for segmentation
    if st.button('Predict'):
        files = {'file': uploaded_file.getvalue()}
        response = requests.post("http://localhost:8000/predict/", files=files)
        st.write(response.json())
